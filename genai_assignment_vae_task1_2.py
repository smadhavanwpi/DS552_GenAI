# -*- coding: utf-8 -*-
"""GenAI_Assignment_VAE_Task1_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fqx83LnCIVvIzEQe5PEEIkVYWNiXTWxg
"""

!pip install torch
!pip install torchvision

import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
import matplotlib.pyplot as plt

# Convolutional VAE Architecture
class ConvVAE(nn.Module):
    def __init__(self, latent_dim):
        super(ConvVAE, self).__init__()

        # Encoder
        self.encoder = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=4, stride=2, padding=1),  # Output: 32x16x16
            nn.ReLU(),
            nn.Conv2d(32, 64, kernel_size=4, stride=2, padding=1),  # Output: 64x8x8
            nn.ReLU(),
            nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1),  # Output: 128x4x4
            nn.ReLU(),
            nn.Flatten()  # Output: 128 * 4 * 4 = 2048
        )

        self.fc_mu = nn.Linear(2048, latent_dim)
        self.fc_logvar = nn.Linear(2048, latent_dim)

        # Decoder
        self.decoder_fc = nn.Linear(latent_dim, 2048)

        self.decoder = nn.Sequential(
            nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1),  # Output: 64x8x8
            nn.ReLU(),
            nn.ConvTranspose2d(64, 32, kernel_size=4, stride=2, padding=1),  # Output: 32x16x16
            nn.ReLU(),
            nn.ConvTranspose2d(32, 3, kernel_size=4, stride=2, padding=1),  # Output: 3x32x32
            nn.Sigmoid()
        )

    def encode(self, x):
        h = self.encoder(x)
        mu = self.fc_mu(h)
        logvar = self.fc_logvar(h)
        return mu, logvar

    def reparameterize(self, mu, logvar):
        std = torch.exp(0.5 * logvar)
        eps = torch.randn_like(std)
        return mu + eps * std

    def decode(self, z):
        h = self.decoder_fc(z)
        h = h.view(-1, 128, 4, 4)  # Reshape to match the input of the first transposed conv layer
        return self.decoder(h)

    def forward(self, x):
        mu, logvar = self.encode(x)
        z = self.reparameterize(mu, logvar)
        return self.decode(z), mu, logvar

# Loss function
def loss_function(recon_x, x, mu, logvar):
    BCE = nn.functional.binary_cross_entropy(recon_x, x, reduction='sum')
    KLD = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())
    return BCE + KLD

# Training the VAE
def train(model, train_loader, optimizer, epoch):
    model.train()
    train_loss = 0
    for batch_idx, (data, _) in enumerate(train_loader):
        optimizer.zero_grad()
        recon_batch, mu, logvar = model(data)
        loss = loss_function(recon_batch, data, mu, logvar)
        loss.backward()
        train_loss += loss.item()
        optimizer.step()
    print(f'Epoch {epoch}, Loss: {train_loss / len(train_loader.dataset)}')

# Load CIFAR-10 dataset
transform = transforms.ToTensor()
train_dataset = datasets.CIFAR10('./data', train=True, download=True, transform=transform)
train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=128, shuffle=True)

# Initialize the Convolutional VAE
latent_dim = 128
conv_vae = ConvVAE(latent_dim=latent_dim)
optimizer = optim.Adam(conv_vae.parameters(), lr=1e-3)

# Train the Convolutional VAE
for epoch in range(1, 11):
    train(conv_vae, train_loader, optimizer, epoch)

# Function to generate and display new images
def generate_images(model, num_images=10, latent_dim=128):
    model.eval()  # Set model to evaluation mode
    with torch.no_grad():  # Turn off gradients for generation
        # Sample random points from the latent space (standard normal distribution)
        z = torch.randn(num_images, latent_dim)
        # Decode these points to generate images
        generated_images = model.decode(z).cpu()

    # Plot the generated images
    fig, axs = plt.subplots(1, num_images, figsize=(num_images, 1.5))
    for i in range(num_images):
        # Reshape to (3, 32, 32) and then permute to (32, 32, 3) for imshow
        axs[i].imshow(generated_images[i].permute(1, 2, 0))
        axs[i].axis('off')
    plt.show()

# Generate and display images from the trained Convolutional VAE
generate_images(conv_vae, num_images=5, latent_dim=latent_dim)

# Function to interpolate between two images in the latent space
def interpolate_images(model, image1, image2, num_interpolations=10):
    model.eval()  # Set model to evaluation mode
    with torch.no_grad():  # Turn off gradients for interpolation
        # Encode the two images into their latent representations
        mu1, _ = model.encode(image1.unsqueeze(0))  # Add batch dimension
        mu2, _ = model.encode(image2.unsqueeze(0))  # Add batch dimension

        # Perform linear interpolation between the latent vectors
        interpolated_images = []
        for alpha in np.linspace(0, 1, num_interpolations):
            interpolated_latent = alpha * mu1 + (1 - alpha) * mu2
            interpolated_image = model.decode(interpolated_latent).cpu()
            interpolated_images.append(interpolated_image)

        return interpolated_images

# Function to display interpolated images in a grid
def display_interpolated_images(interpolated_images):
    num_interpolations = len(interpolated_images)
    fig, axs = plt.subplots(1, num_interpolations, figsize=(num_interpolations, 1.5))
    for i, img in enumerate(interpolated_images):
        axs[i].imshow(img.squeeze().permute(1, 2, 0))  # Remove batch dimension and permute for imshow
        axs[i].axis('off')
    plt.show()

# Select two images from the CIFAR-10 test set
test_dataset = datasets.CIFAR10('./data', train=False, download=True, transform=transform)
image1, _ = test_dataset[0]  # First image in the test set
image2, _ = test_dataset[1]  # Second image in the test set

import numpy as np

# Interpolate between the two images
interpolated_images = interpolate_images(conv_vae, image1, image2, num_interpolations=10)

# Display the interpolated images
display_interpolated_images(interpolated_images)